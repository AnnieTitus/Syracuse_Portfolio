{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Class: IST 652  \n",
    "#Section: M403  \n",
    "#Assignment: Final Project Predicting Song Popularity \n",
    "#Authors: Tyler Gigot, Annie Titus, Daniel Stalica\n",
    "#Due Date: 6/13/2021"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## import pandas library\n",
    "import pandas as pd\n",
    "from pandas import DataFrame\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from mlxtend.preprocessing import TransactionEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read in the 4 datasets used for this project\n",
    "# the first two data sets can be downloaded from kaggle\n",
    "# https://www.kaggle.com/edalrami/19000-spotify-songs/discussion/73524\n",
    "\n",
    "song_data=pd.read_csv('song_data.csv')\n",
    "song_info=pd.read_csv('song_info.csv')\n",
    "\n",
    "# the second two datasets are provided seperately\n",
    "# these two datasets come from web scraping wikipedia\n",
    "\n",
    "master_artist=pd.read_csv('master_artist_T.csv')\n",
    "master_song=pd.read_csv('master_song_T.csv', encoding = ('ISO-8859-1'))\n",
    "\n",
    "# used ISO 8859-1 because without it, i received a UTF-8 error.\n",
    "# The ISO 8859-1 is a single byte encoding that can represent the first 256 Unicode characters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The song_data table is an original dataset from Kaggle, which consists of a\n",
    "# collection of songs that were parsed via the Organize Your Music tool.\n",
    "\n",
    "# Note: there were many duplicate song names, without a way of uniquely identifying\n",
    "#them. For this reason, duplicate song names were removed.\n",
    "\n",
    "# original dataset dimensions\n",
    "song_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean up the song_data df\n",
    "\n",
    "# remove duplicate song names\n",
    "song_data = song_data.drop_duplicates(subset = \"song_name\", keep = False)\n",
    "\n",
    "# cleaned dataset dimensions\n",
    "song_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# view the song_data df\n",
    "song_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The song_info table is an original dataset from Kaggle which contains the\n",
    "# corresponding artist, album, and playlist for each song in the song_data table.\n",
    "\n",
    "# Note: as in the song_data table, there were duplication errors in this table\n",
    "# as well. This is resolved in the same manner by removing duplicate song names.\n",
    "\n",
    "# original dataset dimensions\n",
    "song_info.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean up the song_info df\n",
    "\n",
    "# remove duplicate song names\n",
    "song_info = song_info.drop_duplicates(subset = \"song_name\", keep = False)\n",
    "\n",
    "# cleaned dataset dimensions\n",
    "song_info.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# view the song_info df\n",
    "song_info.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The master_song_T table was collected by web scraping wikipedia pages\n",
    "# for additional information about the songs.\n",
    "\n",
    "# original dataset dimensions\n",
    "master_song.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean up the master_song df\n",
    "\n",
    "# see which songs from master_song exist in song_data\n",
    "master_song = master_song.merge(song_data['song_name'], indicator = True, how = 'outer', on = 'song_name')\n",
    "\n",
    "# keep only rows that exist in both dataframes\n",
    "master_song = master_song[master_song._merge != 'left_only']\n",
    "\n",
    "# cleaned dataset dimensions\n",
    "master_song.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# view the master_song df\n",
    "master_song.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The master_artist_T table was constructed by web scraping wikipedia pages\n",
    "# for additional artist information.\n",
    "\n",
    "# original dataset dimensions\n",
    "master_artist.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# view the master_artist df\n",
    "master_artist.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# combine all the dataframes into one\n",
    "song_main = master_song.merge(song_info, how = 'outer', on = 'song_name')  # merge master song and song info\n",
    "song_main = song_main.merge(song_data, how = 'outer', on = 'song_name')  # merge song main with song data\n",
    "\n",
    "# view the shape of the song main df\n",
    "song_main.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean up the song_main df\n",
    "\n",
    "# keep only selected columns\n",
    "# these are the columns that will be dropped\n",
    "song_main = song_main.drop(['song_id',\n",
    "                            'artist_name_x',\n",
    "                            'song_label',\n",
    "                            'song_songwriter',\n",
    "                            'song_producer',\n",
    "                            '_merge'], axis = 1)\n",
    "\n",
    "# remove all NAs\n",
    "# we only want to keep data where the information was available from wikipedia\n",
    "song_main = song_main.dropna()\n",
    "\n",
    "# view the cleaned df dimensions\n",
    "song_main.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# view the song_main df\n",
    "song_main.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# performing some initial data exploration \n",
    "plt.hist(master_song.song_released, range = (1900, 2020))\n",
    "plt.title('Frequency of Number of Songs by Year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Observations\n",
    "## there are more newer generation songs than older generation songs  \n",
    "## there is a particularly larger number of songs between 2010 and 2020  \n",
    "## the bias is probably due to the preferences of the creator of the data  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# unpacking the song genres\n",
    "\n",
    "# create a function which searches for a substring\n",
    "# this will be used to unpack the song genres\n",
    "\n",
    "def check(string, sub_str):\n",
    "    if (string.find(sub_str) == -1):\n",
    "        return 0\n",
    "    else:\n",
    "        return 1\n",
    "\n",
    "# here is the list of all of the parent genres\n",
    "# note that hip and hop will get put together into hiphop\n",
    "\n",
    "parent_genre_list = ['alt',\n",
    "                     'rock',\n",
    "                     'metal',\n",
    "                     'punk',\n",
    "                     'pop',\n",
    "                     'hip',\n",
    "                     'hop',\n",
    "                     'r&b',\n",
    "                     'rap',\n",
    "                     'jazz',\n",
    "                     'blues',\n",
    "                     'folk',\n",
    "                     'country',\n",
    "                     'elect',\n",
    "                     'other']\n",
    "\n",
    "# create an empty variable for each of the genres\n",
    "# these will be appended to throughout the for loop\n",
    "\n",
    "altcount = []\n",
    "rockcount = []\n",
    "metalcount = []\n",
    "punkcount = []\n",
    "popcount = []\n",
    "hiphopcount = []\n",
    "rbcount = []\n",
    "rapcount = []\n",
    "jazzcount = []\n",
    "bluescount = []\n",
    "folkcount = []\n",
    "countrycount = []\n",
    "electcount = []\n",
    "othercount = []\n",
    "\n",
    "# iterate through each of the songs and corresponding genres\n",
    "# if it contains the genre it will be given a 1 for true\n",
    "# if does not contain the genre it wil be given a 0 for false\n",
    "\n",
    "for nestedgenre in list(song_main['song_genre']):\n",
    "    altcount.append(check(nestedgenre, 'alt'))\n",
    "    rockcount.append(check(nestedgenre, 'rock'))\n",
    "    metalcount.append(check(nestedgenre, 'metal'))\n",
    "    punkcount.append(check(nestedgenre, 'punk'))\n",
    "    popcount.append(check(nestedgenre, 'pop'))\n",
    "    hiphopcount.append(max(check(nestedgenre, 'hip'), check(nestedgenre, 'hop')))\n",
    "    rbcount.append(check(nestedgenre, 'r&b'))\n",
    "    rapcount.append(check(nestedgenre, 'rap'))\n",
    "    jazzcount.append(check(nestedgenre, 'jazz'))\n",
    "    bluescount.append(check(nestedgenre, 'blues'))\n",
    "    folkcount.append(check(nestedgenre, 'folk'))\n",
    "    countrycount.append(check(nestedgenre, 'country'))\n",
    "    electcount.append(check(nestedgenre, 'elect'))\n",
    "    othercount.append(check(nestedgenre, 'other'))\n",
    "\n",
    "# add the columns onto the song main dataframe\n",
    "song_main['alt'] = altcount\n",
    "song_main['rock'] = rockcount\n",
    "song_main['metal'] = metalcount\n",
    "song_main['punk'] = punkcount\n",
    "song_main['pop'] = popcount\n",
    "song_main['hiphop'] = hiphopcount\n",
    "song_main['rb'] = rbcount\n",
    "song_main['rap'] = rapcount\n",
    "song_main['jazz'] = jazzcount\n",
    "song_main['blues'] = bluescount\n",
    "song_main['folk'] = folkcount\n",
    "song_main['country'] = countrycount\n",
    "song_main['elect'] = electcount\n",
    "song_main['other'] = othercount\n",
    "\n",
    "# view the resulting dataframe\n",
    "song_main.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for alternative genre\n",
    "altpopularity = song_main[['song_popularity', 'alt']]\n",
    "altpopularity = altpopularity[altpopularity.alt == 1]\n",
    "altpopularity = round(sum(altpopularity['song_popularity']) / len(altpopularity['song_popularity']))\n",
    "altpopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for rock genre\n",
    "rockpopularity = song_main[['song_popularity', 'rock']]\n",
    "rockpopularity = rockpopularity[rockpopularity.rock == 1]\n",
    "rockpopularity = round(sum(rockpopularity['song_popularity']) / len(rockpopularity['song_popularity']))\n",
    "rockpopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for metal genre\n",
    "metalpopularity = song_main[['song_popularity', 'metal']]\n",
    "metalpopularity = metalpopularity[metalpopularity.metal == 1]\n",
    "metalpopularity = round(sum(metalpopularity['song_popularity']) / len(metalpopularity['song_popularity']))\n",
    "metalpopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for punk genre\n",
    "punkpopularity = song_main[['song_popularity', 'punk']]\n",
    "punkpopularity = punkpopularity[punkpopularity.punk == 1]\n",
    "punkpopularity = round(sum(punkpopularity['song_popularity']) / len(punkpopularity['song_popularity']))\n",
    "punkpopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for pop genre\n",
    "poppopularity = song_main[['song_popularity', 'pop']]\n",
    "poppopularity.columns = ['song_popularity', 'popp']\n",
    "poppopularity = poppopularity[poppopularity.popp == 1]\n",
    "poppopularity = round(sum(poppopularity['song_popularity']) / len(poppopularity['song_popularity']))\n",
    "poppopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for hiphop genre\n",
    "hiphoppopularity = song_main[['song_popularity', 'hiphop']]\n",
    "hiphoppopularity = hiphoppopularity[hiphoppopularity.hiphop == 1]\n",
    "hiphoppopularity = round(sum(hiphoppopularity['song_popularity']) / len(hiphoppopularity['song_popularity']))\n",
    "hiphoppopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for rb genre\n",
    "rbpopularity = song_main[['song_popularity', 'rb']]\n",
    "rbpopularity = rbpopularity[rbpopularity.rb == 1]\n",
    "rbpopularity = round(sum(rbpopularity['song_popularity']) / len(rbpopularity['song_popularity']))\n",
    "rbpopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for rap genre\n",
    "rappopularity = song_main[['song_popularity', 'rap']]\n",
    "rappopularity = rappopularity[rappopularity.rap == 1]\n",
    "rappopularity = round(sum(rappopularity['song_popularity']) / len(rappopularity['song_popularity']))\n",
    "rappopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for jazz genre\n",
    "jazzpopularity = song_main[['song_popularity', 'jazz']]\n",
    "jazzpopularity = jazzpopularity[jazzpopularity.jazz == 1]\n",
    "jazzpopularity = round(sum(jazzpopularity['song_popularity']) / len(jazzpopularity['song_popularity']))\n",
    "jazzpopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for blues genre\n",
    "bluespopularity = song_main[['song_popularity', 'blues']]\n",
    "bluespopularity = bluespopularity[bluespopularity.blues == 1]\n",
    "bluespopularity = round(sum(bluespopularity['song_popularity']) / len(bluespopularity['song_popularity']))\n",
    "bluespopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for folk genre\n",
    "folkpopularity = song_main[['song_popularity', 'folk']]\n",
    "folkpopularity = folkpopularity[folkpopularity.folk == 1]\n",
    "folkpopularity = round(sum(folkpopularity['song_popularity']) / len(folkpopularity['song_popularity']))\n",
    "folkpopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for country genre\n",
    "countrypopularity = song_main[['song_popularity', 'country']]\n",
    "countrypopularity = countrypopularity[countrypopularity.country == 1]\n",
    "countrypopularity = round(sum(countrypopularity['song_popularity']) / len(countrypopularity['song_popularity']))\n",
    "countrypopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for elect genre\n",
    "electpopularity = song_main[['song_popularity', 'elect']]\n",
    "electpopularity = electpopularity[electpopularity.elect == 1]\n",
    "electpopularity = round(sum(electpopularity['song_popularity']) / len(electpopularity['song_popularity']))\n",
    "electpopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# average song popularity for other genre\n",
    "otherpopularity = song_main[['song_popularity', 'other']]\n",
    "otherpopularity = otherpopularity[otherpopularity.other == 1]\n",
    "otherpopularity = round(sum(otherpopularity['song_popularity']) / len(otherpopularity['song_popularity']))\n",
    "otherpopularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Question1: What song genre has the most popular songs?\n",
    "# create a dictionary that will be used to answer the question\n",
    "                                                                                   \n",
    "# create the dictionary with all of the results\n",
    "popularitybygenre = {'Alternative': altpopularity,\n",
    "                     'Rock': rockpopularity,\n",
    "                     'Metal': metalpopularity,\n",
    "                     'Punk': punkpopularity,\n",
    "                     'Pop': poppopularity,\n",
    "                     'HipHop': hiphoppopularity,\n",
    "                     'R&B': rbpopularity,\n",
    "                     'Rap': rappopularity,\n",
    "                     'Jazz': jazzpopularity,\n",
    "                     'Blues': bluespopularity,\n",
    "                     'Folk': folkpopularity,\n",
    "                     'Country': countrypopularity,\n",
    "                     'Electronic': electpopularity,\n",
    "                     'Other': otherpopularity}\n",
    "                                                                                   \n",
    "# show the resulting dictionary\n",
    "popularitybygenre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# show a plot of the average song popularity by genre\n",
    "plt.plot(*zip(*sorted(popularitybygenre.items())))\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
